"use client";
import { createSlice } from "@reduxjs/toolkit";

// Creating a slice of state for the cart using createSlice function from Redux toolkit
export const cartSlice = createSlice({
  name: "cart", // Name of the slice
  initialState: {
    cartItems: [], // Initial state containing an empty array for cart items
  },

  reducers: {
    // Define reducer functions to handle actions
    addToCart: (state, action) => {
      // Add item to cart
      const item = state.cartItems.find((p) => p.id === action.payload.id);
      // If item already exists in cart, increment quantity and update price
      if (item) {
        item.quantity++;
        item.attributes.price = item.oneQuantityPrice * item.quantity;
      } else {
        // If item is not in cart, add it with quantity of 1
        state.cartItems.push({ ...action.payload, quantity: 1 });
      }
    },
    updateCart: (state, action) => {
      // Update cart item based on payload data
      state.cartItems = state.cartItems.map((p) => {
        // Check if the current item matches the one being updated
        if (p.id === action.payload.id) {
          // Check if the update is for quantity
          if (action.payload.key === "quantity") {
            // If updating quantity, calculate and update the price accordingly
            p.attributes.price = p.oneQuantityPrice * action.payload.val;
          }
          // Update the corresponding property of the cart item with the new value from payload
          return { ...p, [action.payload.key]: action.payload.val };
        }
        // If the current item is not the one being updated, return it as is
        return p;
      });
    },
    removeFromCart: (state, action) => {
      // Remove item from cart
      state.cartItems = state.cartItems.filter(
        // Filter out the item to be removed based on its ID
        (p) => p.id !== action.payload.id
      );
    },
  },
});

// Action creators are automatically generated for each reducer function defined in createSlice
export const { addToCart, updateCart, removeFromCart } = cartSlice.actions;

export default cartSlice.reducer; // Exporting the reducer generated by createSlice
